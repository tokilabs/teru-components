// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Ez6vNhJFQ69LZL2fp9zzt
// Component: 8ONy9gxX3F
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_teru_components.module.css"; // plasmic-import: 9Ez6vNhJFQ69LZL2fp9zzt/projectcss
import * as sty from "./PlasmicAppbarOneAction.module.css"; // plasmic-import: 8ONy9gxX3F/css

import ArrowLeftCircleIcon from "./icons/PlasmicIcon__ArrowLeftCircle"; // plasmic-import: mBYeY6JqC_/icon
import SettingIcon from "./icons/PlasmicIcon__Setting"; // plasmic-import: aBGSp_MyC8/icon

export type PlasmicAppbarOneAction__VariantMembers = {};

export type PlasmicAppbarOneAction__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppbarOneAction__VariantsArgs;
export const PlasmicAppbarOneAction__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAppbarOneAction__ArgsType = {};
type ArgPropType = keyof PlasmicAppbarOneAction__ArgsType;
export const PlasmicAppbarOneAction__ArgProps = new Array<ArgPropType>();

export type PlasmicAppbarOneAction__OverridesType = {
  root?: p.Flex<"div">;
  appBar?: p.Flex<"div">;
  arrowLeftCircle?: p.Flex<"div">;
  headLine?: p.Flex<"div">;
  h1Headline?: p.Flex<"div">;
  settings?: p.Flex<"div">;
};

export interface DefaultAppbarOneActionProps {
  className?: string;
}

function PlasmicAppbarOneAction__RenderFunc(props: {
  variants: PlasmicAppbarOneAction__VariantsArgs;
  args: PlasmicAppbarOneAction__ArgsType;
  overrides: PlasmicAppbarOneAction__OverridesType;
  dataFetches?: PlasmicAppbarOneAction__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"appBar"}
        data-plasmic-override={overrides.appBar}
        hasGap={true}
        className={classNames(defaultcss.all, sty.appBar)}
      >
        {false ? (
          <div
            data-plasmic-name={"arrowLeftCircle"}
            data-plasmic-override={overrides.arrowLeftCircle}
            className={classNames(defaultcss.all, sty.arrowLeftCircle)}
          >
            <ArrowLeftCircleIcon
              className={classNames(defaultcss.all, sty.svg___6PYdT)}
              role={"img"}
            />
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"headLine"}
          data-plasmic-override={overrides.headLine}
          hasGap={true}
          className={classNames(defaultcss.all, sty.headLine)}
        >
          <div
            data-plasmic-name={"h1Headline"}
            data-plasmic-override={overrides.h1Headline}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.h1Headline
            )}
          >
            {"Appbar"}
          </div>
        </p.Stack>

        <div
          data-plasmic-name={"settings"}
          data-plasmic-override={overrides.settings}
          className={classNames(defaultcss.all, sty.settings)}
        >
          <SettingIcon
            className={classNames(defaultcss.all, sty.svg__kRbXm)}
            role={"img"}
          />
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appBar",
    "arrowLeftCircle",
    "headLine",
    "h1Headline",
    "settings"
  ],
  appBar: ["appBar", "arrowLeftCircle", "headLine", "h1Headline", "settings"],
  arrowLeftCircle: ["arrowLeftCircle"],
  headLine: ["headLine", "h1Headline"],
  h1Headline: ["h1Headline"],
  settings: ["settings"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  appBar: "div";
  arrowLeftCircle: "div";
  headLine: "div";
  h1Headline: "div";
  settings: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppbarOneAction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppbarOneAction__VariantsArgs;
    args?: PlasmicAppbarOneAction__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAppbarOneAction__Fetches;
  } & Omit<PlasmicAppbarOneAction__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAppbarOneAction__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAppbarOneAction__ArgProps,
      internalVariantPropNames: PlasmicAppbarOneAction__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAppbarOneAction__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppbarOneAction";
  } else {
    func.displayName = `PlasmicAppbarOneAction.${nodeName}`;
  }
  return func;
}

export const PlasmicAppbarOneAction = Object.assign(
  // Top-level PlasmicAppbarOneAction renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appBar: makeNodeComponent("appBar"),
    arrowLeftCircle: makeNodeComponent("arrowLeftCircle"),
    headLine: makeNodeComponent("headLine"),
    h1Headline: makeNodeComponent("h1Headline"),
    settings: makeNodeComponent("settings"),

    // Metadata about props expected for PlasmicAppbarOneAction
    internalVariantProps: PlasmicAppbarOneAction__VariantProps,
    internalArgProps: PlasmicAppbarOneAction__ArgProps
  }
);

export default PlasmicAppbarOneAction;
/* prettier-ignore-end */
