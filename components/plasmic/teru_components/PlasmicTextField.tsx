// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Ez6vNhJFQ69LZL2fp9zzt
// Component: Q4FuTUtyUw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_teru_components.module.css"; // plasmic-import: 9Ez6vNhJFQ69LZL2fp9zzt/projectcss
import * as sty from "./PlasmicTextField.module.css"; // plasmic-import: Q4FuTUtyUw/css

export type PlasmicTextField__VariantMembers = {};

export type PlasmicTextField__VariantsArgs = {};
type VariantPropType = keyof PlasmicTextField__VariantsArgs;
export const PlasmicTextField__VariantProps = new Array<VariantPropType>();

export type PlasmicTextField__ArgsType = {};
type ArgPropType = keyof PlasmicTextField__ArgsType;
export const PlasmicTextField__ArgProps = new Array<ArgPropType>();

export type PlasmicTextField__OverridesType = {
  root?: p.Flex<"div">;
  newInput?: p.Flex<"div">;
  label?: p.Flex<"div">;
  formFieldsTextInput?: p.Flex<"div">;
  placeholder?: p.Flex<"div">;
};

export interface DefaultTextFieldProps {
  className?: string;
}

function PlasmicTextField__RenderFunc(props: {
  variants: PlasmicTextField__VariantsArgs;
  args: PlasmicTextField__ArgsType;
  overrides: PlasmicTextField__OverridesType;
  dataFetches?: PlasmicTextField__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"newInput"}
        data-plasmic-override={overrides.newInput}
        hasGap={true}
        className={classNames(defaultcss.all, sty.newInput)}
      >
        <div
          data-plasmic-name={"label"}
          data-plasmic-override={overrides.label}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.label
          )}
        >
          {"header"}
        </div>

        <div
          data-plasmic-name={"formFieldsTextInput"}
          data-plasmic-override={overrides.formFieldsTextInput}
          className={classNames(defaultcss.all, sty.formFieldsTextInput)}
        >
          <div
            data-plasmic-name={"placeholder"}
            data-plasmic-override={overrides.placeholder}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.placeholder
            )}
          >
            {"input-label"}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "newInput", "label", "formFieldsTextInput", "placeholder"],
  newInput: ["newInput", "label", "formFieldsTextInput", "placeholder"],
  label: ["label"],
  formFieldsTextInput: ["formFieldsTextInput", "placeholder"],
  placeholder: ["placeholder"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  newInput: "div";
  label: "div";
  formFieldsTextInput: "div";
  placeholder: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextField__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextField__VariantsArgs;
    args?: PlasmicTextField__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTextField__Fetches;
  } & Omit<PlasmicTextField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTextField__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextField__ArgProps,
      internalVariantPropNames: PlasmicTextField__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTextField__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextField";
  } else {
    func.displayName = `PlasmicTextField.${nodeName}`;
  }
  return func;
}

export const PlasmicTextField = Object.assign(
  // Top-level PlasmicTextField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    newInput: makeNodeComponent("newInput"),
    label: makeNodeComponent("label"),
    formFieldsTextInput: makeNodeComponent("formFieldsTextInput"),
    placeholder: makeNodeComponent("placeholder"),

    // Metadata about props expected for PlasmicTextField
    internalVariantProps: PlasmicTextField__VariantProps,
    internalArgProps: PlasmicTextField__ArgProps
  }
);

export default PlasmicTextField;
/* prettier-ignore-end */
