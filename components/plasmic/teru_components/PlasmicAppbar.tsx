// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Ez6vNhJFQ69LZL2fp9zzt
// Component: 8ONy9gxX3F
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_teru_components.module.css"; // plasmic-import: 9Ez6vNhJFQ69LZL2fp9zzt/projectcss
import * as sty from "./PlasmicAppbar.module.css"; // plasmic-import: 8ONy9gxX3F/css

import InfoSquareIcon from "./icons/PlasmicIcon__InfoSquare"; // plasmic-import: DIcOqc7ccT/icon

export type PlasmicAppbar__VariantMembers = {
  leadingAndTrailing: "oneTailing";
  onlyTrailing: "onlyTrailing";
  onlyLeading: "onlyLeading";
};

export type PlasmicAppbar__VariantsArgs = {
  leadingAndTrailing?: SingleChoiceArg<"oneTailing">;
  onlyTrailing?: SingleBooleanChoiceArg<"onlyTrailing">;
  onlyLeading?: SingleBooleanChoiceArg<"onlyLeading">;
};

type VariantPropType = keyof PlasmicAppbar__VariantsArgs;
export const PlasmicAppbar__VariantProps = new Array<VariantPropType>(
  "leadingAndTrailing",
  "onlyTrailing",
  "onlyLeading"
);

export type PlasmicAppbar__ArgsType = {};
type ArgPropType = keyof PlasmicAppbar__ArgsType;
export const PlasmicAppbar__ArgProps = new Array<ArgPropType>();

export type PlasmicAppbar__OverridesType = {
  root?: p.Flex<"div">;
  appBar?: p.Flex<"div">;
  arrowLeftCircle?: p.Flex<"div">;
  nicknames?: p.Flex<"div">;
  nicknameId01?: p.Flex<"div">;
  info?: p.Flex<"div">;
};

export interface DefaultAppbarProps {
  leadingAndTrailing?: SingleChoiceArg<"oneTailing">;
  onlyTrailing?: SingleBooleanChoiceArg<"onlyTrailing">;
  onlyLeading?: SingleBooleanChoiceArg<"onlyLeading">;
  className?: string;
}

function PlasmicAppbar__RenderFunc(props: {
  variants: PlasmicAppbar__VariantsArgs;
  args: PlasmicAppbar__ArgsType;
  overrides: PlasmicAppbar__OverridesType;
  dataFetches?: PlasmicAppbar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"appBar"}
        data-plasmic-override={overrides.appBar}
        hasGap={true}
        className={classNames(defaultcss.all, sty.appBar)}
      >
        <div
          data-plasmic-name={"arrowLeftCircle"}
          data-plasmic-override={overrides.arrowLeftCircle}
          className={classNames(defaultcss.all, sty.arrowLeftCircle, {
            [sty.arrowLeftCircle__onlyTrailing]: hasVariant(
              variants,
              "onlyTrailing",
              "onlyTrailing"
            )
          })}
        >
          {(
            hasVariant(variants, "onlyTrailing", "onlyTrailing") ? true : true
          ) ? (
            <InfoSquareIcon
              className={classNames(defaultcss.all, sty.svg__fPcc9, {
                [sty.svg__onlyTrailing__fPcc9SuYsH]: hasVariant(
                  variants,
                  "onlyTrailing",
                  "onlyTrailing"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>

        <div
          data-plasmic-name={"nicknames"}
          data-plasmic-override={overrides.nicknames}
          className={classNames(defaultcss.all, sty.nicknames, {
            [sty.nicknames__leadingAndTrailing_oneTailing]: hasVariant(
              variants,
              "leadingAndTrailing",
              "oneTailing"
            )
          })}
        >
          <div
            data-plasmic-name={"nicknameId01"}
            data-plasmic-override={overrides.nicknameId01}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.nicknameId01
            )}
          >
            {"AppBar"}
          </div>
        </div>

        <div
          data-plasmic-name={"info"}
          data-plasmic-override={overrides.info}
          className={classNames(defaultcss.all, sty.info, {
            [sty.info__onlyLeading]: hasVariant(
              variants,
              "onlyLeading",
              "onlyLeading"
            )
          })}
        >
          {(
            hasVariant(variants, "onlyLeading", "onlyLeading") ? true : true
          ) ? (
            <InfoSquareIcon
              className={classNames(defaultcss.all, sty.svg__umgrF, {
                [sty.svg__onlyLeading__umgrFpEiit]: hasVariant(
                  variants,
                  "onlyLeading",
                  "onlyLeading"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appBar",
    "arrowLeftCircle",
    "nicknames",
    "nicknameId01",
    "info"
  ],
  appBar: ["appBar", "arrowLeftCircle", "nicknames", "nicknameId01", "info"],
  arrowLeftCircle: ["arrowLeftCircle"],
  nicknames: ["nicknames", "nicknameId01"],
  nicknameId01: ["nicknameId01"],
  info: ["info"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  appBar: "div";
  arrowLeftCircle: "div";
  nicknames: "div";
  nicknameId01: "div";
  info: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppbar__VariantsArgs;
    args?: PlasmicAppbar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAppbar__Fetches;
  } & Omit<PlasmicAppbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAppbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAppbar__ArgProps,
      internalVariantPropNames: PlasmicAppbar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAppbar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppbar";
  } else {
    func.displayName = `PlasmicAppbar.${nodeName}`;
  }
  return func;
}

export const PlasmicAppbar = Object.assign(
  // Top-level PlasmicAppbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appBar: makeNodeComponent("appBar"),
    arrowLeftCircle: makeNodeComponent("arrowLeftCircle"),
    nicknames: makeNodeComponent("nicknames"),
    nicknameId01: makeNodeComponent("nicknameId01"),
    info: makeNodeComponent("info"),

    // Metadata about props expected for PlasmicAppbar
    internalVariantProps: PlasmicAppbar__VariantProps,
    internalArgProps: PlasmicAppbar__ArgProps
  }
);

export default PlasmicAppbar;
/* prettier-ignore-end */
